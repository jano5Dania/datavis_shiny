shiny::runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
pacman::p_load(shiny, tidyverse, ggplot2, gapminder)
runApp('03_lektion')
runApp('03_lektion')
glimpse(faithful)
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
#Add custom JavaScript for playing a sound on hover
tags$head(
tags$script(HTML("
function playSound() {
var audio = new Audio('https://www.myinstants.com/media/sounds/mario-jump.mp3');
audio.play();
}
"))
),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
div(
img(id = "logo", src = "dania_logo.png", height = "80px",
onmouseover = "playSound()"),  # Play sound on hover
style = "text-align: center; margin-bottom: 10px;"
),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
glimpse(passat)
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
runApp('03_lektion')
